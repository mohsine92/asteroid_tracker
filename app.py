import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt

# Cl√© API depuis variable d'environnement
API_KEY = st.secrets["NASA_API_KEY"]



# Titre et description

st.set_page_config(page_title="NASA Asteroid Tracker", layout="centered")
st.title("NASA Asteroid Tracker")
st.write("Visualisation des ast√©ro√Ødes proches de la Terre √† partir des donn√©es publiques de la NASA.")

# Param√®tres utilisateur

st.info("""
‚ÑπÔ∏è Pour des volumes de donn√©es plus importants, utilisez votre cl√© NASA personnelle.
La Key actuelle est limit√© √† 30 requ√™tes/h et 1000/jour.
Cr√©ez votre cl√© sur [NASA API](https://api.nasa.gov)
""")

start_date = st.date_input("Date de d√©but", pd.to_datetime("2025-08-20"))
end_date = st.date_input("Date de fin", pd.to_datetime("2025-08-25"))

# R√©cup√©ration des donn√©es NASA

url = f"https://api.nasa.gov/neo/rest/v1/feed?start_date={start_date}&end_date={end_date}&api_key={API_KEY}"

try:
    response = requests.get(url)
    response.raise_for_status()  # d√©clenche une exception si code != 200
    data = response.json()
    
    asteroid_list = []
    for date, asteroids in data["near_earth_objects"].items():
        for asteroid in asteroids:
            asteroid_list.append({
                "date": date,
                "name": asteroid['name'],
                "diameter_m": asteroid['estimated_diameter']['meters']['estimated_diameter_max'],
                "hazardous": asteroid['is_potentially_hazardous_asteroid']
            })

    df = pd.DataFrame(asteroid_list)

    # Tableau interactif

    st.subheader("üìã Donn√©es brutes")
    st.dataframe(df)

    # Visualisation

    st.subheader("üìà Taille des ast√©ro√Ødes par date")
    fig, ax = plt.subplots()
    colors = df["hazardous"].map({True: "red", False: "green"})
    ax.scatter(df["date"], df["diameter_m"], c=colors, s=100, alpha=0.7)
    ax.set_title("Ast√©ro√Ødes proches de la Terre")
    ax.set_xlabel("Date de passage")
    ax.set_ylabel("Diam√®tre (m)")
    plt.xticks(rotation=45)
    st.pyplot(fig)


    # Alertes
    st.subheader("üö® Ast√©ro√Ødes dangereux d√©tect√©s")
    dangerous = df[df["hazardous"] == True]
    if not dangerous.empty:
        st.error(f"{len(dangerous)} ast√©ro√Ødes dangereux d√©tect√©s ‚ö†Ô∏è")
        st.table(dangerous[["date", "name", "diameter_m"]])
    else:
        st.success("Aucun ast√©ro√Øde dangereux sur cette p√©riode ‚úÖ")

except requests.exceptions.HTTPError:
    if response.status_code == 403:
        st.error("üö® Quota API atteint. Merci de cr√©er votre propre cl√© NASA pour continuer.")
    else:
        st.error(f"Erreur {response.status_code} lors de la r√©cup√©ration des donn√©es NASA.")
except requests.exceptions.RequestException as e:
    st.error(f"Erreur r√©seau : {e}")
except KeyError:
    st.error("Erreur inattendue : format des donn√©es NASA inconnu.")